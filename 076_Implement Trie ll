import java.util.* ;
import java.io.*; 

class Node{
    Node links[] = new Node[26];
    int pc = 0;
    int wc = 0;

    public boolean containsKey(char ch){
        return (links[ch-'a']!=null);
    }

    public void put(char ch, Node node){
        links[ch-'a'] = node;
    }

    public Node get(char ch){
        return links[ch-'a'];
    }

}


public class Trie {

    public static Node root;
    public Trie() {
        root = new Node();
    }

    public void insert(String word) {
        Node node = root;
        for(int i=0;i<word.length();i++){
            if(!node.containsKey(word.charAt(i))){
                node.put(word.charAt(i),new Node());
            }
            node = node.get(word.charAt(i));
            node.pc++;
        }
        node.wc++;
    }

    public int countWordsEqualTo(String word) {
        Node node = root;
        for(int i=0;i<word.length();i++){
            if(!node.containsKey(word.charAt(i))){
                return 0;
            }
            node = node.get(word.charAt(i));
        }
        return node.wc;
    }

    public int countWordsStartingWith(String word) {
        Node node = root;
        for(int i=0;i<word.length();i++){
            if(!node.containsKey(word.charAt(i))){
                return 0;
            }
            node = node.get(word.charAt(i));
        }
        return node.pc;
    }

    public void erase(String word) {
        Node node = root;
        for(int i=0;i<word.length();i++){
            if(node.containsKey(word.charAt(i))){
                node = node.get(word.charAt(i));
                node.pc--;
            }
            else{
                return;
            }
        }
        node.wc--;
    }

}
