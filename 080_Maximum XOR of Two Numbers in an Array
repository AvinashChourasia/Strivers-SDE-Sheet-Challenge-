import java.util.* ;
import java.io.*; 

class Node{
    Node links[] = new Node[2];
    boolean containsKey(int bit){
        return (links[bit]!=null);
    }
    void put(int bit,Node node){
        links[bit] = node;
    }
    Node get(int bit){
        return links[bit];
    }
}

class Trie{
    private static Node root;
    Trie(){
        root = new Node();
    }
    public static void insert(int num){
        Node node = root;
        for(int i=31;i>=0;i--){
            int bit = (num>>i)&1;
            if(!node.containsKey(bit)){
                node.put(bit,new Node());
            }
            node = node.get(bit);
        }
    }
    public int getMax(int num){
        Node node = root;
        int maxNumber = 0;
        for(int i=31;i>=0;i--){
            int bit = (num>>i)&1;
            if(node.containsKey(1-bit)){
                maxNumber = maxNumber|(1<<i);
                node = node.get(1-bit);
            }
            else{
                node = node.get(bit);
            }
        }
        return maxNumber;
    }
}



public class Solution {

    public static int maximumXor(int[] arr) {

        int n = arr.length;
        Trie obj = new Trie();
        for(int i=0;i<n;i++){
            obj.insert(arr[i]);
        }
        int max = 0;
        for(int i=0;i<n;i++){
            max = Math.max(max,obj.getMax(arr[i]));
        }
        return max;
    }
}
