import java.util.* ;
import java.io.*; 

class Node{

  Node links[] = new Node[26];
  boolean flag = false;

  public boolean containsKey(char ch){
        return (links[ch-'a']!=null);
    }

    public void put(char ch, Node node){
        links[ch-'a'] = node;
    }

    public Node get(char ch){
        return links[ch-'a'];
    }

    public void setEnd(){
        flag = true;
    }

    public boolean isEnd(){
        return flag;
    }

}

class Trie {

    public static Node root;
    
    Trie() {
        root = new Node();
    }


    public static void insert(String word) {
        Node node = root;
        for(int i=0;i<word.length();i++){
            if(!node.containsKey(word.charAt(i))){
                node.put(word.charAt(i),new Node());
            }
            node = node.get(word.charAt(i));
        }
        node.setEnd();
    }


    public static boolean checkIfAllPrefixExist(String word) {
        Node node = root;
        for(int i=0;i<word.length();i++){
            if(node.containsKey(word.charAt(i))){
                node = node.get(word.charAt(i));
                if(node.isEnd()==false){
                  return false;
                }
            }
            else{
              return false;
            }
        }
        return true;
    }

}



class Solution {



  public static String completeString(int n, String[] a) {

    Trie obj = new Trie();
    for(int i=0;i<n;i++){
      obj.insert(a[i]);
    }
    String ans = "";
    for(int i=0;i<n;i++){
      if(obj.checkIfAllPrefixExist(a[i])){
        if(a[i].length()>ans.length()){
          ans = a[i];
        }
        else if(a[i].length()==ans.length() && a[i].compareTo(ans)<0){
          ans = a[i];
        }
      }
    }

    if(ans==""){
      return "None";
    }
    return ans;

  }
}
