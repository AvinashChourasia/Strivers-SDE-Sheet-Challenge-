import java.util.* ;
import java.io.*; 
public class Solution {
    
    public static int[] maxMinWindow(int[] a, int n) {

        // Using stack -> next/previous smaller element approach
        int nse[] = new int[n];
        Stack<Integer> s1 = new Stack<>();
        for(int i=n-1;i>=0;i--){
            while(!s1.isEmpty() && a[s1.peek()]>=a[i]){
                s1.pop();
            }
            if(s1.isEmpty()){
                nse[i] = n;
            }
            else{
                nse[i] = s1.peek();
            }
            s1.push(i);
        }
        int pse[] = new int[n];
        Stack<Integer> s2 = new Stack<>();
        for(int i=0;i<n;i++){
            while(!s2.isEmpty() && a[s2.peek()]>=a[i]){
                s2.pop();
            }
            if(s2.isEmpty()){
                pse[i] = -1;
            }
            else{
                pse[i] = s2.peek();
            }
            s2.push(i);
        }
        
        int ans[] = new int[n];
        Arrays.fill(ans,Integer.MIN_VALUE);
        for(int i=0;i<n;i++){
            int len = nse[i]-pse[i]-1;
            ans[len-1] = Math.max(ans[len-1],a[i]);
        }
        for(int i=n-2;i>=0;i--){
            ans[i] = Math.max(ans[i],ans[i+1]);
        }
        return ans;



        // Using priority Queue
        // int ans[] = new int[n];
        // for(int k=1;k<=n;k++){
        //     int maxi = Integer.MIN_VALUE;
        //     PriorityQueue<Integer> pq = new PriorityQueue<>();
        //     for(int i=0;i<n;i++){
        //         pq.add(a[i]);
        //         if(pq.size()>k){
        //             pq.remove(a[i-k]);
        //         }
        //         if(pq.size()==k){
        //             maxi = Math.max(maxi,pq.peek());
        //         }
        //     }
        //     ans[k-1] = maxi;
        // }
        // return ans;
    }

}
