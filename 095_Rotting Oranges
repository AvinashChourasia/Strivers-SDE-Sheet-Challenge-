import java.util.*;

class Pair{
  int f,s,t;
  Pair(int f,int s,int t){
    this.f = f;
    this.s = s;
    this.t = t;
  }
}

public class Solution {

  public static int minTimeToRot(int[][] grid, int n, int m) {
    
    Queue<Pair> q = new LinkedList<>();
    int count = 0;
    int v[][] = new int[n][m];
    for(int i=0;i<n;i++){
      for(int j=0;j<m;j++){
        if(grid[i][j]==2){
          q.add(new Pair(i,j,0));
          v[i][j] = 1;
        }
      }
    }

    int dr[] = {-1,0,+1,0};
    int dc[] = {0,+1,0,-1};
    int ans = 0;
    while(!q.isEmpty()){
      int row = q.peek().f;
      int col = q.peek().s;
      int tm = q.peek().t;
      ans = Math.max(ans,tm);
      q.poll();
      for(int i=0;i<4;i++){
        int nr = row + dr[i];
        int nc = col + dc[i];
        if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]==1 && v[nr][nc]==0){
          v[nr][nc] = 1;
          q.add(new Pair(nr,nc,tm+1));
        }
      }
    }
    for(int i=0;i<n;i++){
      for(int j=0;j<m;j++){
        if(grid[i][j]==1 && v[i][j]==0){
          return -1;
        }
      }
    }
    return ans;
  }
