import java.util.* ;
import java.io.*; 
public class Solution {
    public static long getInversions(long arr[], int n) {
        
        return mergeSort(arr,0,n-1);
    }

    public static long mergeSort(long arr[],int low,int high){
        long count = 0;
        if(low<high){
            int mid = (low+high)/2;
            count+=mergeSort(arr,low,mid);
            count+=mergeSort(arr,mid+1,high);
            count+=merge(arr,low,mid,high);
        }
        return count;
    }

    public static long merge(long arr[],int low,int mid,int high){
        long count = 0;
        int i = low;
        int j = mid+1;
        int k = 0;
        long a[] = new long[high-low+1];
        while(i<=mid && j<=high){
            if(arr[i]<=arr[j]){
                a[k++] = arr[i++];
            }
            else{
                a[k++] = arr[j++];
                count += (mid-i+1);
            }
        }
        while(i<=mid){
            a[k++] = arr[i++];
        }
        while(j<=high){
            a[k++] = arr[j++];
        }
        for(int p=low;p<=high;p++){
            arr[p] = a[p-low];
        }
        return count;
    }

}
