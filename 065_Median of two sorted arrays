import java.util.*;
public class Solution {
    
    public static double median(int[] a, int[] b) {

    //    Use binary search
        if(a.length > b.length){
            return median(b,a);
        }
        int n1 = a.length;
        int n2 = b.length;
        if(n2==0){
            if(n1%2==0){
                return (a[n1/2] + a[n1/2 - 1])/2;
            }
            else{
                return a[n1/2];
            }
        }
        int low = 0;
        int high = n1;
        while(low<=high){
            int cut1 = (low+high)/2;
            int cut2 = (n1+n2+1)/2 - cut1;
            int l1 = (cut1==0) ? Integer.MIN_VALUE : a[cut1-1];
            int l2 = (cut2==0) ? Integer.MIN_VALUE : b[cut2-1];
            int r1 = (cut1==n1) ? Integer.MAX_VALUE : a[cut1];
            int r2 = (cut2==n2) ? Integer.MAX_VALUE : b[cut2];
            if(l1<=r2 && l2<=r1){
                if( (n1+n2)%2==0){
                    return ( Math.max(l1,l2) + Math.min(r1,r2) )/2.0; 
                }
                else{
                    return Math.max(l1,l2);
                }
            }  
            else if(l1>r2){
                high = cut1-1;
            }
            else{
                low = cut1+1;
            }
        }
        return 0.0;

//      Use merge sort
        // int n = a.length;
        // int m = b.length;
        // int arr[] = new int[n+m];
        // int i = 0;
        // int j = 0;
        // int k = 0;
        // while(i<n && j<m){
        //     if(k>(n+m)/2){
        //         break;
        //     }
        //     if(a[i]<=b[j]){
        //         arr[k++] = a[i++];
        //     }
        //     else{
        //         arr[k++]= b[j++];
        //     }
        // }
        // while(i<n){
        //     if(k>(n+m)/2){
        //         break;
        //     }
        //     arr[k++] = a[i++];
        // }
        // while(j<m){
        //     if(k>(n+m)/2){
        //         break;
        //     }
        //     arr[k++] = b[j++];
        // }
        
        // if((m+n)%2==0){
        //     return (arr[(m+n)/2 -1]+arr[(m+n)/2])/2.0;
        // }
        // return (double)arr[(m+n)/2];


//      Use priority Queue
        // int n = a.length;
        // int m = b.length;
        // int k = (n+m)/2 +1;
        // boolean flag = false;
        // if((n+m)%2==0){
        //     flag = true;
        // }
        // PriorityQueue<Integer> pq = new PriorityQueue<>();
        // for(int item:a){
        //     pq.add(item);
        //     if(pq.size()>k){
        //         pq.poll();
        //     }
        // }
        // for(int item:b){
        //     pq.add(item);
        //     if(pq.size()>k){
        //         pq.poll();
        //     }
        // }
        // if(flag){
        //     int x = pq.poll();
        //     int y = pq.poll();
        //     return (x+y)/2.0;
        // }
        // return (double)pq.poll();
    }

}
